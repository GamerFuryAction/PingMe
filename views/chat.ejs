<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>PingMe Chat</title>
  <link rel="stylesheet" href="/style.css" />
  <script defer src="https://cdn.jsdelivr.net/npm/@joeattardi/emoji-button@4.6.2/dist/index.min.js"></script>
  <script defer src="/your-script.js"></script>
</head>
<body>
  <div class="sidebar">
    <h3>Online Users</h3>
    <ul id="user-list"></ul>
  </div>

  <div class="chat-container">
    <header>
      <h2>PingMe - <%= username %></h2>
      <a href="/logout">Logout</a>
    </header>

    <ul id="messages"></ul>
    <ul id="user-list"></ul>
    <div id="typing-status"></div>

    <form id="form">
      <button type="button" id="emoji-btn">ðŸ˜Š</button>
      <input id="input" autocomplete="off" placeholder="Type a message..." />
      <button>Send</button>
    </form>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    const socket = io();
    const currentUser = "<%= username %>";
    const form = document.getElementById('form');
    const input = document.getElementById('input');
    const messages = document.getElementById('messages');
    const userList = document.getElementById('user-list');
    const typingStatus = document.getElementById('typing-status');
    const emojiBtn = document.getElementById('emoji-btn');
    let currentTarget = null;
    let typingTimeout;

    const picker = new EmojiButton({ theme: 'dark' });

  emojiBtn.addEventListener('click', () => {
    picker.togglePicker(emojiBtn);
  });

  picker.on('emoji', emoji => {
    input.value += emoji;
    input.focus();
  });

    emojiBtn.addEventListener('click', () => {
      picker.togglePicker(emojiBtn);
    });

    form.addEventListener('submit', (e) => {
      e.preventDefault();
      const msg = input.value.trim();
      if (!msg) return;

      if (currentTarget) {
        socket.emit('private message', { to: currentTarget, msg });
        addMessage(`You â†’ ${currentTarget}`, msg, 'me');
      } else {
        socket.emit('chat message', msg);
      }

      input.value = '';
      stopTyping();
    });

    input.addEventListener('input', () => {
      socket.emit('typing', currentTarget || null);
      clearTimeout(typingTimeout);
      typingTimeout = setTimeout(stopTyping, 1000);
    });

    function stopTyping() {
      socket.emit('stop typing', currentTarget || null);
    }

    socket.on('chat message', (data) => {
      addMessage(data.username, data.msg, data.username === currentUser ? 'me' : 'them');
    });

    socket.on('private message', (data) => {
      addMessage(`${data.from} (private)`, data.msg, 'them');
    });

    socket.on('online users', (users) => {
      userList.innerHTML = '';
      users.forEach(name => {
        if (name === currentUser) return;
        const li = document.createElement('li');
        li.textContent = name;
        li.onclick = () => {
          currentTarget = name;
          alert(`Chatting privately with ${name}`);
        };
        userList.appendChild(li);
      });
    });

    socket.on('typing', ({ from }) => {
      typingStatus.textContent = `${from} is typing...`;
    });

    socket.on('stop typing', ({ from }) => {
      if (typingStatus.textContent.startsWith(from)) {
        typingStatus.textContent = '';
      }
    });

    function addMessage(sender, msg, who) {
      const li = document.createElement('li');
      li.classList.add('message', who);
      li.innerHTML = `
        <span class="username">${sender}</span>
        <div class="bubble">${msg}</div>
      `;
      li.style.opacity = 0;
      messages.appendChild(li);
      setTimeout(() => {
        li.style.opacity = 1;
        li.style.transform = 'translateY(0)';
      }, 20);
      messages.scrollTop = messages.scrollHeight;
    }
  </script>
</body>
</html>
